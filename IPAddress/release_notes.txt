Version 5 release:

This version introduces new address range classes and reorganizes classes and code in the inet.ipaddr.format package.

-parsing performance improvements
-prefixEquals and contains methods to IPAddressString for optimized containment checks
-added increment(long) and incrementBoundary(long) methods
-added address range functionality with the new IPAddressSeqRange class and the IPv4 and IPv6 subclasses
-added IPAddressRange interface for commonality between IPAddress and IPAddressSeqRange ranges
-reorganization of classes and interfaces in inet.ipaddr.format package to standard, large, and string subpackages
-expansion of the large division functionality, which uses BigInteger for address division values, to match the standard functionality which uses longs for address divisions
-new static toNormalizedString string production methods to produce strings directly without intervening objects
-new iterators: blockIterator(int), sequentialBlockIterator(), prefixIterator(), prefixBlockIterator(int), and their associated count methods, namely getSequentialBlockCount to go with sequentialBlockIterator() and prefixCount to go with iterator(), nonZeroHostIterator() and prefixBlockIterator(). Also added the isSequential() method.
-added mergeToSequentialBlocks to match mergeToPrefixBlocks
-works with Java 8, 9, 10, 11 and upwards, comprises the inet.ipaddr module for Java 9 and upwards
-distributed jars are compiled with java 8, but those jars also include the module-info class for the Java Platform Module System (JPMS) 
introduced with Java 9
-fully compatible with Android using Android API level 24 or higher.

Version 4 release:

The main change in version 4 is a change to the way IP addresses with prefix length are handled,
as well as options for going back to the old behaviour, or using a third option (see PrefixConfiguration class or the docs for details on the options)

-added prefix length handling options
-changes to network classes and address classes to support prefix handling options
-runtime exception refactoring - reorganized them and added more error checking
-added new method options to ignore IPv4 network or IPv6 subnet router anycast (ie the zero host) address when iterating or getting lowest address in a subnet
-added new conversions to/from BigInteger, int, long
-added intersect method
-added toPrefixBlock method
-added IPAddressSegmentSeries interface for a shared interface amongst IP addresses and address sections
-renamed a bunch of methods:
	isRangeEquivalentToPrefix renamed to isSinglePrefixBlock
	getEquivalentPrefix renamed to getPrefixLengthForSingleBlock
	toPrefixedEquivalent renamed to assignPrefixForSingleBlock
	isRangeUnchanged renamed to isPrefixBlock(Integer) 
	getMinPrefix renamed to getMinPrefixLengthForBlock
	toMinPrefixedEquivalent renamed to assignMinPrefixForBlock
	getMaskPrefixLength renamed to getBlockMaskPrefixLength
	matchesWithPrefix renamed to matchesWithPrefixMask
	isRangeEquivalent renamed to isPrefixBlock
	isMultipleByNetworkPrefix is replaced by isSinglePrefixBlock
-moved a few static methods:
	IPAddress.getStandardLoopbackStrings, IPAddress.getLoopback available from class IPAddressNetwork
	IPAddress.from available as IPAddressNetwork.IPAddressGenerator.from
	IPAddress.getLocalHost is removed.  Instead use IPAddressNetwork.IPAddressGenerator.from on the result of InetAddress.getLocalHost().getAddress() 
	Some network object access methods have been changed.  You can address default network object directly from defaultIpv4Network, defaultIpv6Network and defaultMACNetwork in class Address

Version 4 is not backwards compatible with version 3, but migration is straightforward.


Version 3 release:

Version 3 additions
-MAC address support
-MAC address integration with IPv6
-IPv6 base 85 strings, both parsing and producing
-parsing and producing hex strings
-IPvx octal and binary strings
-new address framework
-UNC IPv6 literal strings, both parsing and producing
-Reverse DNS lookup strings, both parsing and producing
-new reverse operations - reverse bits, bits, segments, bits per segment
-new set of prefix and mask operations: set/apply/adjust/removePrefixLength, mask, maskNetwork, bitwiseOr, bitwiseOrNetwork
-new set of section operations, append/prepend/replace, also getSection variants
-parse host names with ports
-parsing delimited segments 1,2.3.4,5,6.7
-improved host identifier string caches
-getHostAddress in IPAddressString


Version 3 is not backwards compatible with version 2, but migration is straightforward.

No functionality has been removed. A few classes and methods have been renamed.
-toSubnet methods replaced by mask, maskNetwork, setPrefixLength, applyPrefixLength, removePrefixLength, adjustPrefixLength.
-IPAddressStringException is now AddressStringException
